CREATE extension vector
WITH schema extensions;

CREATE TABLE documents ( id bigserial, content text null, metadata jsonb null, embedding vector(1536) null, created_at timestamp
WITH time zone not null default now
(
), user_id text null, constraint documents_pkey primary key (id) );

create function match_documents (
  query_embedding vector(1536),
  match_count int DEFAULT null,
  filter jsonb DEFAULT '{}'
) returns table (
  id bigint,
  content text,
  metadata jsonb,
  embedding jsonb,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    (embedding::text)::jsonb as embedding,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding
  limit match_count;
end;
$$;

CREATE TABLE conversations ( id bigint generated by default AS identity, created_at timestamp
WITH time zone null default now
(
), prompt text null, user_id text null, channel_id text null, response text null, thread_ts text null, source_documents jsonb null, chat_history jsonb null, constraint conversations_pkey primary key (id) );

CREATE TABLE sources ( id bigint generated by default AS identity, created_at timestamp
WITH time zone null default now
(
), text text not null, is_verified boolean not null default false, updated_at timestamp
WITH time zone not null default now
(
), embeddings jsonb null default '[]'::jsonb, external_doc_id text null, user_id text null, is_archived boolean not null default false, embedded_at timestamp
WITH time zone null, constraint content_pkey primary key
(id
) );

CREATE TABLE tokens ( id bigint generated by default AS identity, created_at timestamp
WITH time zone null default now
(
), token uuid not null default gen_random_uuid (), api_call_count numeric not null default '0'::numeric, scopes jsonb not null default '["chat"]'::jsonb, user_id text not null, constraint tokens_pkey primary key (id), constraint tokens_token_key unique (token), constraint tokens_user_id_key unique (user_id) );

// Create an enum type for user types with the following values: admin, user, bot
CREATE TYPE user_type AS ENUM ('admin', 'user', 'bot');
CREATE TABLE users ( created_at timestamp
WITH time zone null default now
(
), type user_type not null default 'admin'::user_type, id uuid not null, primary_email text not null, slack_id text null, constraint users_pkey primary key (id), constraint users_primary_email_key unique (primary_email), constraint users_uuid_key unique (id), constraint users_id_fkey foreign key (id) references auth.users (id)
ON
DELETE cascade );